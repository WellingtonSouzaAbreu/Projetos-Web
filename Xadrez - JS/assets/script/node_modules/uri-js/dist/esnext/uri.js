/**
 * URI.js
 *
 * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
 * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
 * @see http://github.com/garycourt/uri-js
 */
/**
 * Copyright 2011 Gary Court. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 *
 *    1. Redistributions of source code must retain the above copyright notice, this list of
 *       conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright notice, this list
 *       of conditions and the following disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those of the
 * authors and should not be interpreted as representing official policies, either expressed
 * or implied, of Gary Court.
 */
import URI_PROTOCOL from "./regexps-uri";
import IRI_PROTOCOL from "./regexps-iri";
import punycode from "punycode";
import { toUpperCase, typeOf, assign } from "./util";
export const SCHEMES = {};
export function pctEncChar(chr) {
    const c = chr.charCodeAt(0);
    let e;
    if (c < 16)
        e = "%0" + c.toString(16).toUpperCase();
    else if (c < 128)
        e = "%" + c.toString(16).toUpperCase();
    else if (c < 2048)
        e = "%" + ((c >> 6) | 192).toString(16).toUpperCase() + "%" + ((c & 63) | 128).toString(16).toUpperCase();
    else
        e = "%" + ((c >> 12) | 224).toString(16).toUpperCase() + "%" + (((c >> 6) & 63) | 128).toString(16).toUpperCase() + "%" + ((c & 63) | 128).toString(16).toUpperCase();
    return e;
}
export function pctDecChars(str) {
    let newStr = "";
    let i = 0;
    const il = str.length;
    while (i < il) {
        const c = parseInt(str.substr(i + 1, 2), 16);
        if (c < 128) {
            newStr += String.fromCharCode(c);
            i += 3;
        }
        else if (c >= 194 && c < 224) {
            if ((il - i) >= 6) {
                const c2 = parseInt(str.substr(i + 4, 2), 16);
                newStr += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
            }
            else {
                newStr += str.substr(i, 6);
            }
            i += 6;
        }
        else if (c >= 224) {
            if ((il - i) >= 9) {
                const c2 = parseInt(str.substr(i + 4, 2), 16);
                const c3 = parseInt(str.substr(i + 7, 2), 16);
                newStr += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            }
            else {
                newStr += str.substr(i, 9);
            }
            i += 9;
        }
        else {
            newStr += str.substr(i, 3);
            i += 3;
        }
    }
    return newStr;
}
function _normalizeComponentEncoding(components, protocol) {
    function decodeUnreserved(str) {
        const decStr = pctDecChars(str);
        return (!decStr.match(protocol.UNRESERVED) ? str : decStr);
    }
    if (components.scheme)
        components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
    if (components.userinfo !== undefined)
        components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.host !== undefined)
        components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.path !== undefined)
        components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace((components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME), pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.query !== undefined)
        components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    if (components.fragment !== undefined)
        components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
    return components;
}
;
function _stripLeadingZeros(str) {
    return str.replace(/^0*(.*)/, "$1") || "0";
}
function _normalizeIPv4(host, protocol) {
    const matches = host.match(protocol.IPV4ADDRESS) || [];
    const [, address] = matches;
    if (address) {
        return address.split(".").map(_stripLeadingZeros).join(".");
    }
    else {
        return host;
    }
}
function _normalizeIPv6(host, protocol) {
    const matches = host.match(protocol.IPV6ADDRESS) || [];
    const [, address, zone] = matches;
    if (address) {
        const [last, first] = address.toLowerCase().split('::').reverse();
        const firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
        const lastFields = last.split(":").map(_stripLeadingZeros);
        const isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
        const fieldCount = isLastFieldIPv4Address ? 7 : 8;
        const lastFieldsStart = lastFields.length - fieldCount;
        const fields = Array(fieldCount);
        for (let x = 0; x < fieldCount; ++x) {
            fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
        }
        if (isLastFieldIPv4Address) {
            fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
        }
        const allZeroFields = fields.reduce((acc, field, index) => {
            if (!field || field === "0") {
                const lastLongest = acc[acc.length - 1];
                if (lastLongest && lastLongest.index + lastLongest.length === index) {
                    lastLongest.length++;
                }
                else {
                    acc.push({ index, length: 1 });
                }
            }
            return acc;
        }, []);
        const longestZeroFields = allZeroFields.sort((a, b) => b.length - a.length)[0];
        let newHost;
        if (longestZeroFields && longestZeroFields.length > 1) {
            const newFirst = fields.slice(0, longestZeroFields.index);
            const newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
            newHost = newFirst.join(":") + "::" + newLast.join(":");
        }
        else {
            newHost = fields.join(":");
        }
        if (zone) {
            newHost += "%" + zone;
        }
        return newHost;
    }
    else {
        return host;
    }
}
const URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
const NO_MATCH_IS_UNDEFINED = ("").match(/(){0}/)[1] === undefined;
export function parse(uriString, options = {}) {
    const components = {};
    const protocol = (options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL);
    if (options.reference === "suffix")
        uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
    const matches = uriString.match(URI_PARSE);
           Ï˚É(ˇˇˇˇ        CÉ(    :É(ˇˇˇˇ    "ì   ¸É(   ¸˚É(               ˇˇˇˇ4BÉ(    ?BÉ(   JBÉ("ì   T¸É(                       ˇˇˇˇ˜CÉ(ˇˇˇˇÌCÉ("ì   ê¸É(                           ËÖ(    ´ Ä(             ƒ¸É(ˇˇˇˇ        ÑCÉ(    :É(ˇˇˇˇ    "ì   Ë¸É(   ‘¸É(                   ËÖ(    s⁄Ä(            ,˝É("ì   t˝É(   <˝É(               ˇˇˇˇbDÉ(           jDÉ(   :É(        ˇˇˇˇ?DÉ("ì   ú˝É(                           ËÖ(    ¸“Ä(             »˝É(ˇˇˇˇ        DÉ(    :É(ˇˇˇˇ    "ì   Ï˝É(   ÿ˝É(                   ËÖ(    »œÄ(             0˛É(ˇˇˇˇ         CÉ(    :É(ˇˇˇˇ    "ì   T˛É(   @˛É(               ˇˇˇˇÆBÉ("ì   ò˛É(                       ˇˇˇˇ”BÉ("ì   ƒ˛É(                       ˇˇˇˇßCÉ(ˇˇˇˇ:É("ì   ˛É(                       ˇˇˇˇçDÉ(ˇˇˇˇ:É("ì   $ˇÉ(                       ˇˇˇˇ¿DÉ("ì   XˇÉ(                           ËÖ(    åÒÄ(             ÑˇÉ(ˇˇˇˇ        ÛDÉ(    :É(ˇˇˇˇ    "ì   ®ˇÉ(   îˇÉ(               ˇˇˇˇ•FÉ("ì   ÏˇÉ(                       ˇˇˇˇ¢EÉ(    ≠EÉ(   ∏EÉ(   √EÉ("ì    Ñ(                       ˇˇˇˇˆEÉ(    FÉ(   FÉ("ì   \ Ñ(                       ˇˇˇˇrFÉ("ì   ò Ñ(                       ˇˇˇˇ?FÉ("ì   ƒ Ñ(                       "ì   Ñ(                       ˇˇˇˇ\EÉ(    dEÉ(    oEÉ(ˇˇˇˇ:É(ˇˇˇˇ    ˇˇˇˇ&EÉ(   .EÉ(   :É(   6EÉ(ˇˇˇˇ:É(ˇˇˇˇAEÉ(
   IEÉ(
   :É(
   QEÉ(ˇˇˇˇ:É(ˇˇˇˇÿFÉ(ˇˇˇˇ:É("ì   åÑ(                           ËÖ(    -#Å(             ¿Ñ(ˇˇˇˇ        5GÉ(    :É(ˇˇˇˇ    "ì   ‰Ñ(   –Ñ(                   ËÖ(    @!Å(             (Ñ(ˇˇˇˇ        GÉ(    :É(ˇˇˇˇ    "ì   LÑ(   8Ñ(               ˇˇˇˇXGÉ("ì   êÑ(                       ˇˇˇˇ–GÉ(ˇˇˇˇ:É("ì   ºÑ(                       ˇˇˇˇ~GÉ(ˇˇˇˇàGÉ("ì   Ñ(                           ËÖ(    "4Å(             $Ñ(ˇˇˇˇ        ≠GÉ(    :É(ˇˇˇˇ    "ì   HÑ(   4Ñ(               ˇˇˇˇHÉ("ì   åÑ(                       ˇˇˇˇ;HÉ("ì   ∏Ñ(                           ¿RÅ(    ÙÑ(   Ñ( Ñ(<Ñ(    HÖ(    ˇˇˇˇ       –QÅ(   pÖ(    ˇˇˇˇ       ∞QÅ(    åÖ(    ˇˇˇˇ       RÅ("ì
   |Ñ(                       ˇˇˇˇºHÉ(    ƒHÉ(    :É(    ÃHÉ(    :É(    ‘HÉ(    ‹HÉ(    :É(    ‰HÉ(ˇˇˇˇ:É("ì   Ñ(                       ˇˇˇˇ^HÉ(    iHÉ(   wHÉ(   ÖHÉ(   ìHÉ("ì   <Ñ(                       ˇˇˇˇIÉ(ˇˇˇˇ:É(    IÉ(    :É(    $IÉ(    ,IÉ(    :É(    4IÉ(    <IÉ(    :É(    DIÉ(ˇˇˇˇ:É("ì
   ¿Ñ(                       ˇˇˇˇtIÉ(    |IÉ(    ÑIÉ(    åIÉ(    îIÉ(    úIÉ(    §IÉ(    ¨IÉ(    ¥IÉ(ˇˇˇˇ:É(ˇˇˇˇˇIÉ("ì   Ñ(                       @           äáÅ(ˇˇˇˇ    ˇˇˇˇ                  <Ñ("ì   LÑ(   \Ñ(               ˇˇˇˇ$JÉ(    /JÉ("ì   îÑ(                       ˇˇˇˇbJÉ(ˇˇˇˇlJÉ(ˇˇˇˇvJÉ(ˇˇˇˇÄJÉ("ì   »Ñ(                           ËÖ(    ¿≥Å(    ËÖ(    w≥Å(    ËÖ(    ≥Å(    ËÖ(    è≤Å(    ËÖ(    /≤Å("ì   ‰Ñ(   ÄÑ(                            LÑ(            <Ñ(   
         ,Ñ(            Ñ(            Ñ(ˇˇˇˇ        •JÉ(    :É(ˇˇˇˇ    ˇˇˇˇ       ≠JÉ(   :É(ˇˇˇˇ    ˇˇˇˇ       µJÉ(   :É(ˇˇˇˇ    ˇˇˇˇ       ΩJÉ(   :É(ˇˇˇˇ    ˇˇˇˇ       ≈JÉ(   :É(ˇˇˇˇ    ˇˇˇˇËJÉ("ì   ÑÑ(                       ˇˇˇˇKÉ(    KÉ("ì   ∞Ñ(                       ˇˇˇˇiKÉ(    qKÉ(   |KÉ("ì   ‰Ñ(                       ˇˇˇˇ"LÉ(ˇˇˇˇ:É("ì    	Ñ(                       ˇˇˇˇÙKÉ(    ¸KÉ("ì   T	Ñ(                       ˇˇˇˇ∆LÉ(ˇˇˇˇ:É("ì   à	Ñ(                       ˇˇˇˇ|LÉ("ì   º	Ñ(                       ˇˇˇˇ°LÉ("ì   Ë	Ñ(                       ˇˇˇˇOLÉ(ˇˇˇˇ:É("ì   
Ñ(                       "ì   l
Ñ(                       ˇˇˇˇ¢KÉ(    ™KÉ(   µKÉ(   ¿KÉ(   ÀKÉ(ˇˇˇˇFKÉ(ˇˇˇˇ:É("ì   î
Ñ(                       ˇˇˇˇÈLÉ("ì   »
Ñ(                       ˇˇˇˇMÉ("ì   Ù
Ñ(                       ˇˇˇˇQMÉ(    \MÉ("ì    Ñ(                           ËÖ(    UDÇ(             TÑ(ˇˇˇˇ        NÉ(    :É(ˇˇˇˇ    "ì   xÑ(   dÑ(                   ËÖ(    HÇ(    ËÖ(    ÊFÇ("ì   (Ñ(    Ñ(               brackets and escape zone separator for IPv6
        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, (_, $1, $2) => "[" + $1 + ($2 ? "%25" + $2 : "") + "]"));
    }
    if (typeof components.port === "number" || typeof components.port === "string") {
        uriTokens.push(":");
        uriTokens.push(String(components.port));
    }
    return uriTokens.length ? uriTokens.join("") : undefined;
}
;
const RDS1 = /^\.\.?\//;
const RDS2 = /^\/\.(\/|$)/;
const RDS3 = /^\/\.\.(\/|$)/;
const RDS4 = /^\.\.?$/;
const RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
export function removeDotSegments(input) {
    const output = [];
    while (input.length) {
        if (input.match(RDS1)) {
            input = input.replace(RDS1, "");
        }
        else if (input.match(RDS2)) {
            input = input.replace(RDS2, "/");
        }
        else if (input.match(RDS3)) {
            input = input.replace(RDS3, "/");
            output.pop();
        }
        else if (input === "." || input === "..") {
            input = "";
        }
        else {
            const im = input.match(RDS5);
            if (im) {
                const s = im[0];
                input = input.slice(s.length);
                output.push(s);
            }
            else {
                throw new Error("Unexpected dot segment condition");
            }
        }
    }
    return output.join("");
}
;
export function serialize(components, options = {}) {
    const protocol = (options.iri ? IRI_PROTOCOL : URI_PROTOCOL);
    const uriTokens = [];
    //find scheme handler
    const schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
    //perform scheme specific serialization
    if (schemeHandler && schemeHandler.serialize)
        schemeHandler.serialize(components, options);
    if (components.host) {
        //if host component is an IPv6 address
        if (protocol.IPV6ADDRESS.test(components.host)) {
            //TODO: normalize IPv6 address as per RFC 5952
        }
        //if host component is a domain name
        else if (options.domainHost || (schemeHandler && schemeHandler.domainHost)) {
            //convert IDN via punycode
            try {
                components.host = (!options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host));
            }
            catch (e) {
                components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
            }
        }
    }
    //normalize encoding
    _normalizeComponentEncoding(components, protocol);
    if (options.reference !== "suffix" && components.scheme) {
        uriTokens.push(components.scheme);
        uriTokens.push(":");
    }
    const authority = _recomposeAuthority(components, options);
    if (authority !== undefined) {
        if (options.reference !== "suffix") {
            uriTokens.push("//");
        }
        uriTokens.push(authority);
        if (components.path && components.path.charAt(0) !== "/") {
            uriTokens.push("/");
        }
    }
    if (components.path !== undefined) {
        let s = components.path;
        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
            s = removeDotSegments(s);
        }
        if (authority === undefined) {
            s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
        }
        uriTokens.push(s);
    }
    if (components.query !== undefined) {
        uriTokens.push("?");
        uriTokens.push(components.query);
    }
    if (components.fragment !== undefined) {
        uriTokens.push("#");
        uriTokens.push(components.fragment);
    }
    return uriTokens.join(""); //merge tokens into a string
}
;
export function resolveComponents(base, relative, options = {}, skipNormalization) {
    const target = {};
    if (!skipNormalization) {
        base = parse(serialize(base, o æèB øè ¿êB ¡ê ¬ëB √ë ƒíB ≈í ∆ìB «ì »îB …î  ¸B À¸ ÃïB Õï ŒñB œñ –¢B —¢ “óB ”ó ‘òB ’ò ÷ôB ◊ô ÿöB Ÿö ⁄õB €õ ‹¡B ›¡ ﬁúÌ	£ ·ù! ‚û! „ü√	• Ê†  ° ¢  ° £ Á§ Ë• È¶Ô	ß Ïß  ' ®  ) ©  

≤# Ìı! Ó™! Ô´ ¨ Ò≠ Ú¢B Û¢ Ù’B ı’ ˆÆÔ	©¶˘Ø  À ∞  

≤# ˙ı! ˚± ¸≤ ˝≥  – ôB ˛ô ˇÅB ÄÅ Å¥û	´¶Ñ(µ  & ∂  ' ∑  & ∏  ) π  & ∫  ã ª  

≤# Öı! Üº   °" á£" àΩ! âæ! äø! ã¿ åä! ç" é¡ è¬ ê√ ëƒ í≈ ì∆ î« ï»  — ÆB ñÆ ó¿B ò¿ ô¸B ö¸ õ˝B ú˝ ù¡B û¡ ü›	B †›	 °ÅB ¢Å £…Ô	≠¶¶+    À  & Ã  ' Õ   Œ   œ   –  

≤# ßı! ®—! ©“ ™” ´‘ ¨’ ≠÷ Æ◊ Øÿ ∞Ÿ ±⁄ ≤€ ≥‹ ¥› µﬁ ∂ﬂ ∑‡ ∏· π‚ ∫„ ª‰  j ÂB ºÂ ΩÊB æÊ øÁB ¿Á ¡∞B ¬∞ √ﬁB ƒﬁ ≈ËB ∆Ë «ÅB »Å …ÈÍ	∞≈®ÎÏÌÃ)Ó  

Ô   ≠" Õ≠# Œ   ¨" œ¨# –Â —Á “Ò  

… ”… ‘Ú  	Û ’Û ÷Ù  

ı ◊ı ÿˆ  ˜ Ÿ˜ ⁄¯  7 ˘ €˘ ‹– ›¬ ﬁÆ ﬂ¡ ‡≥ ·ä ‚Ç „˙ ‰Å Â´ Ê≠ Á˚ Ë¸ È˝ Í˛ Îˇ ÏÄ ÌÅÈ	≤ÇÉ   Ñ ÒÖ ÚÖ ÛÜ ÙÜ ıá ˆá ˜à! ¯˚! ˘â ˙ä ˚ã ¸ƒ ˝≈ ˛å ˇﬁû	¥÷¶Ö&ç  + é  + è  & ê  & ë  ) í  ” ì   î  

≤# Üı! áï àñ âó äò ãô åö çõ éú èù êû ëü ï˜   ¯   ˘   ˙   †  ª ÆB ñÆ ó¸B ò¸ ô˝B ö˝ õôB úô ùºB ûº üÅB †Å °°û	∂¶§i¢  + £  + §  + •  + ¶  + ß  + ®  + ©  + ™  + ´  + ¨  & ≠  & Æ  & Ø  & ∞  & ±  & ≤  ∞ ≥  & ¥  & µ  

≤# •ı! ¶°" ß∂! ®∑! ©∏  
π ™∫ ´ª ¨º ≠Ω Ææ Øø ∞¿ ±¡ ≤¬ ≥√ ¥ƒ µ≈ ∂∆ ∑« ∏» π… ∫  ªÀ ºÃ ΩÕ æŒ øœ ¿– ¡— ¬“ √” ƒ‘ ≈’ ∆÷ «◊ »ÿ …Ÿ  ⁄ À€ Ã‹ Õ› Œﬁ œﬂ  ® çB –ç —éB “é ”èB ‘è ’êB ÷ê ◊‡B ÿ‡ Ÿ·B ⁄· €ëB ‹ë ›íB ﬁí ﬂìB ‡ì ·îB ‚î „¸B ‰¸ Â¢B Ê¢ ÁóB Ëó ÈòB Íò ÎôB Ïô ÌöB Óö Ô‚B ‚ ÒõB Úõ Û¡B Ù¡ ıÅB ˆÅ ˜„Ô	∏÷˝‰  z Â  

≤# ˛ı! ˇÊ ÄÁ ÅË ÇÈ á˜   ¯   ˘   ˙   Í  , ÄB àÄ âÅB äÅ ãÎÔ	∫÷¶ëÏ  • Ì  ™ Ó  ™ Ô  ™   

≤# íı! ìÒ îÚ ö˜   ¯   ˘   ˙   Û  z ÙB õÙ úıB ùı ûˆB üˆ †˜B °˜ ¢ÅB £Å §¯û	º÷¶™&˘   ˙  ® ˚   ¸  ∞ ˝   ˛  

≤# ´ı! ¨ˇ ≠Ä ÆÅ ØÇ ∞É ±Ñ ≤Ö ≥Ü ¥á µà ∂â ∑ä ∏ã ∫˜   ¯   ˘   ˙   å  T çB ªç º±	B Ω±	 æ»B ø» ¿≤	B ¡≤	 ¬éB √é ƒÅB ≈Å ∆è¬	æ … êû	ø÷¶œtë  + í  + ì  + î  + ï   ñ   ó   ò  & ô  & ö  & õ  & ú  ) ù   û  ∞ ü  ƒ †  ∞ °  ® ¢  ∆ £   §  » •  ∞ ¶  ≈ ß  ’ ®  

≤# –ı! —©! “°" ”™! ‘´ ’¨ ÷≠ ◊Æ ÿØ Ÿ∞ ⁄± €≤ ‹≥ ›≤ ﬁ≥ ﬂ¥ ‡µ ·∂ ‚∑ „∏ ‰π Â∫ Êª Áº ËΩ Èæ Íø Î¿ Ï¡ Ì¬ Ó√ Ôƒ ≈ Ò∆ Ú« Û» Ù… ı  ˆÀ ˜Ã ¯Õ ˘Œ ˙œ ˚– ¸— ˝“ ˇ˜   ¯   ˘   ˙   ”  ÷ ‘B Ä‘ Å’B Ç’ É÷B Ñ÷ Ö◊B Ü◊ áÿB àÿ âŸB äŸ ã⁄B å⁄ ç€B é€ è‹B ê‹ ëÿB íÿ ì›B î› ïŸB ñŸ óﬁB òﬁ ôﬁB öﬁ õﬂB úﬂ ù‡B û‡ ü‚B †‚ °„B ¢„ £ﬂB §ﬂ •ÅB ¶Å ß‡û	¡÷¶≠X·   ‚  √ „  & ‰  & Â   Ê  ∞ Á  ∞ Ë  ® È  ∞ Í  ø Î  ∆